# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2


class SDFSServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchSequence = channel.unary_unary(
                '/api.SDFSService/FetchSequence',
                request_serializer=api__pb2.FetchSequenceRequest.SerializeToString,
                response_deserializer=api__pb2.FetchSequenceResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/api.SDFSService/Read',
                request_serializer=api__pb2.ReadRequest.SerializeToString,
                response_deserializer=api__pb2.ReadResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/api.SDFSService/Write',
                request_serializer=api__pb2.WriteRequest.SerializeToString,
                response_deserializer=api__pb2.WriteResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/api.SDFSService/Delete',
                request_serializer=api__pb2.DeleteRequest.SerializeToString,
                response_deserializer=api__pb2.DeleteResponse.FromString,
                )
        self.Lookup = channel.unary_unary(
                '/api.SDFSService/Lookup',
                request_serializer=api__pb2.LookupRequest.SerializeToString,
                response_deserializer=api__pb2.LookupResponse.FromString,
                )
        self.BulkLookup = channel.unary_unary(
                '/api.SDFSService/BulkLookup',
                request_serializer=api__pb2.BulkLookupRequest.SerializeToString,
                response_deserializer=api__pb2.BulkLookupResponse.FromString,
                )


class SDFSServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchSequence(self, request, context):
        """client requests global sequence to leader
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """get a file from replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """put a file to replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """delete a file from replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lookup(self, request, context):
        """lookup a file from replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkLookup(self, request, context):
        """bulk lookup files from replicas, responded with missing files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SDFSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchSequence,
                    request_deserializer=api__pb2.FetchSequenceRequest.FromString,
                    response_serializer=api__pb2.FetchSequenceResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=api__pb2.ReadRequest.FromString,
                    response_serializer=api__pb2.ReadResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=api__pb2.WriteRequest.FromString,
                    response_serializer=api__pb2.WriteResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=api__pb2.DeleteRequest.FromString,
                    response_serializer=api__pb2.DeleteResponse.SerializeToString,
            ),
            'Lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.Lookup,
                    request_deserializer=api__pb2.LookupRequest.FromString,
                    response_serializer=api__pb2.LookupResponse.SerializeToString,
            ),
            'BulkLookup': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkLookup,
                    request_deserializer=api__pb2.BulkLookupRequest.FromString,
                    response_serializer=api__pb2.BulkLookupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.SDFSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SDFSService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/FetchSequence',
            api__pb2.FetchSequenceRequest.SerializeToString,
            api__pb2.FetchSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/Read',
            api__pb2.ReadRequest.SerializeToString,
            api__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/Write',
            api__pb2.WriteRequest.SerializeToString,
            api__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/Delete',
            api__pb2.DeleteRequest.SerializeToString,
            api__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/Lookup',
            api__pb2.LookupRequest.SerializeToString,
            api__pb2.LookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BulkLookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.SDFSService/BulkLookup',
            api__pb2.BulkLookupRequest.SerializeToString,
            api__pb2.BulkLookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DNSServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Lookup = channel.unary_unary(
                '/api.DNSService/Lookup',
                request_serializer=api__pb2.LookupLeaderRequest.SerializeToString,
                response_deserializer=api__pb2.LookupLeaderResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/api.DNSService/Update',
                request_serializer=api__pb2.UpdateLeaderRequest.SerializeToString,
                response_deserializer=api__pb2.UpdateLeaderResponse.FromString,
                )


class DNSServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Lookup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DNSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.Lookup,
                    request_deserializer=api__pb2.LookupLeaderRequest.FromString,
                    response_serializer=api__pb2.LookupLeaderResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=api__pb2.UpdateLeaderRequest.FromString,
                    response_serializer=api__pb2.UpdateLeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.DNSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DNSService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.DNSService/Lookup',
            api__pb2.LookupLeaderRequest.SerializeToString,
            api__pb2.LookupLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.DNSService/Update',
            api__pb2.UpdateLeaderRequest.SerializeToString,
            api__pb2.UpdateLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Train = channel.unary_unary(
                '/api.CoordinatorService/Train',
                request_serializer=api__pb2.TrainRequest.SerializeToString,
                response_deserializer=api__pb2.TrainResponse.FromString,
                )
        self.Inference = channel.unary_unary(
                '/api.CoordinatorService/Inference',
                request_serializer=api__pb2.InferenceRequest.SerializeToString,
                response_deserializer=api__pb2.InferenceResponse.FromString,
                )
        self.QueryData = channel.unary_unary(
                '/api.CoordinatorService/QueryData',
                request_serializer=api__pb2.QueryDataRequest.SerializeToString,
                response_deserializer=api__pb2.QueryDataResponse.FromString,
                )
        self.IDunnoStatus = channel.unary_unary(
                '/api.CoordinatorService/IDunnoStatus',
                request_serializer=api__pb2.IDunnoStatusRequest.SerializeToString,
                response_deserializer=api__pb2.IDunnoStatusResponse.FromString,
                )
        self.Backup = channel.unary_unary(
                '/api.CoordinatorService/Backup',
                request_serializer=api__pb2.BackupRequest.SerializeToString,
                response_deserializer=api__pb2.BackupResponse.FromString,
                )


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Train(self, request, context):
        """train a model with specified dataset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inference(self, request, context):
        """start inference job with specified model and query batch size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryData(self, request, context):
        """query a batch of data from coordinator & submit batch result from previous round
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IDunnoStatus(self, request, context):
        """get real-time updates on workers & jobs status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Backup(self, request, context):
        """backup coordinator state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=api__pb2.TrainRequest.FromString,
                    response_serializer=api__pb2.TrainResponse.SerializeToString,
            ),
            'Inference': grpc.unary_unary_rpc_method_handler(
                    servicer.Inference,
                    request_deserializer=api__pb2.InferenceRequest.FromString,
                    response_serializer=api__pb2.InferenceResponse.SerializeToString,
            ),
            'QueryData': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryData,
                    request_deserializer=api__pb2.QueryDataRequest.FromString,
                    response_serializer=api__pb2.QueryDataResponse.SerializeToString,
            ),
            'IDunnoStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.IDunnoStatus,
                    request_deserializer=api__pb2.IDunnoStatusRequest.FromString,
                    response_serializer=api__pb2.IDunnoStatusResponse.SerializeToString,
            ),
            'Backup': grpc.unary_unary_rpc_method_handler(
                    servicer.Backup,
                    request_deserializer=api__pb2.BackupRequest.FromString,
                    response_serializer=api__pb2.BackupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CoordinatorService/Train',
            api__pb2.TrainRequest.SerializeToString,
            api__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CoordinatorService/Inference',
            api__pb2.InferenceRequest.SerializeToString,
            api__pb2.InferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CoordinatorService/QueryData',
            api__pb2.QueryDataRequest.SerializeToString,
            api__pb2.QueryDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IDunnoStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CoordinatorService/IDunnoStatus',
            api__pb2.IDunnoStatusRequest.SerializeToString,
            api__pb2.IDunnoStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Backup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.CoordinatorService/Backup',
            api__pb2.BackupRequest.SerializeToString,
            api__pb2.BackupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Train = channel.unary_unary(
                '/api.WorkerService/Train',
                request_serializer=api__pb2.TrainRequest.SerializeToString,
                response_deserializer=api__pb2.TrainResponse.FromString,
                )
        self.Inference = channel.unary_unary(
                '/api.WorkerService/Inference',
                request_serializer=api__pb2.InferenceRequest.SerializeToString,
                response_deserializer=api__pb2.InferenceResponse.FromString,
                )
        self.FinishInference = channel.unary_unary(
                '/api.WorkerService/FinishInference',
                request_serializer=api__pb2.FinishInferenceRequest.SerializeToString,
                response_deserializer=api__pb2.FinishInferenceResponse.FromString,
                )


class WorkerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Train(self, request, context):
        """train a model with specified dataset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inference(self, request, context):
        """start inference job with specified model and query batch size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishInference(self, request, context):
        """notify worker that inference is finished
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=api__pb2.TrainRequest.FromString,
                    response_serializer=api__pb2.TrainResponse.SerializeToString,
            ),
            'Inference': grpc.unary_unary_rpc_method_handler(
                    servicer.Inference,
                    request_deserializer=api__pb2.InferenceRequest.FromString,
                    response_serializer=api__pb2.InferenceResponse.SerializeToString,
            ),
            'FinishInference': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishInference,
                    request_deserializer=api__pb2.FinishInferenceRequest.FromString,
                    response_serializer=api__pb2.FinishInferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.WorkerService/Train',
            api__pb2.TrainRequest.SerializeToString,
            api__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.WorkerService/Inference',
            api__pb2.InferenceRequest.SerializeToString,
            api__pb2.InferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.WorkerService/FinishInference',
            api__pb2.FinishInferenceRequest.SerializeToString,
            api__pb2.FinishInferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Greet = channel.unary_unary(
                '/api.InferenceService/Greet',
                request_serializer=api__pb2.GreetRequest.SerializeToString,
                response_deserializer=api__pb2.GreetResponse.FromString,
                )
        self.Train = channel.unary_unary(
                '/api.InferenceService/Train',
                request_serializer=api__pb2.TrainRequest.SerializeToString,
                response_deserializer=api__pb2.TrainResponse.FromString,
                )
        self.ServeModel = channel.unary_unary(
                '/api.InferenceService/ServeModel',
                request_serializer=api__pb2.ServeModelRequest.SerializeToString,
                response_deserializer=api__pb2.ServeModelResponse.FromString,
                )
        self.Evaluate = channel.unary_unary(
                '/api.InferenceService/Evaluate',
                request_serializer=api__pb2.EvaluateRequest.SerializeToString,
                response_deserializer=api__pb2.EvaluateResponse.FromString,
                )


class InferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Greet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """pretrain model on specified dataset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServeModel(self, request, context):
        """start loading model and waiting for incoming input
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Evaluate(self, request, context):
        """evaluate model with a set of files
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Greet': grpc.unary_unary_rpc_method_handler(
                    servicer.Greet,
                    request_deserializer=api__pb2.GreetRequest.FromString,
                    response_serializer=api__pb2.GreetResponse.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=api__pb2.TrainRequest.FromString,
                    response_serializer=api__pb2.TrainResponse.SerializeToString,
            ),
            'ServeModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ServeModel,
                    request_deserializer=api__pb2.ServeModelRequest.FromString,
                    response_serializer=api__pb2.ServeModelResponse.SerializeToString,
            ),
            'Evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.Evaluate,
                    request_deserializer=api__pb2.EvaluateRequest.FromString,
                    response_serializer=api__pb2.EvaluateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Greet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.InferenceService/Greet',
            api__pb2.GreetRequest.SerializeToString,
            api__pb2.GreetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.InferenceService/Train',
            api__pb2.TrainRequest.SerializeToString,
            api__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServeModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.InferenceService/ServeModel',
            api__pb2.ServeModelRequest.SerializeToString,
            api__pb2.ServeModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.InferenceService/Evaluate',
            api__pb2.EvaluateRequest.SerializeToString,
            api__pb2.EvaluateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
